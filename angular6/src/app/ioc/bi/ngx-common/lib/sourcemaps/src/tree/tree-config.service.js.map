{"version":3,"sources":["src/tree/tree-config.service.ts"],"names":[],"mappings":"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","file":"../../../src/tree/tree-config.service.js","sourcesContent":["import { Injectable, Optional } from '@angular/core';\r\nimport { TreeComponent, TreeModel, TreeNode } from 'angular-tree-component';\r\n\r\nimport { ApiServer, DialogService } from 'core-services/core';\r\nimport { REQUEST_OPTIONS } from 'app/pack/common/src/index';\r\nimport { TreeConfig } from './tree-config';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\n\r\nexport class TreeConfigService {\r\n    private config;\r\n\r\n    constructor(\r\n        private dataServer: ApiServer,\r\n        private dialogService: DialogService,\r\n        @Optional() config: TreeConfig\r\n    ) {\r\n        if (config) {\r\n            this.config = config;\r\n        }\r\n    }\r\n\r\n    buildTree(list: Array<any>, root?: any): Array<any> {\r\n        let listOut = [{\r\n            id: 'root',\r\n            name: 'Root',\r\n            isExpanded: true,\r\n            children: []\r\n        }];\r\n        let node: any;\r\n\r\n        if (root) {\r\n            listOut[0] = root;\r\n        }\r\n        node = listOut[0];\r\n        for (let i = 0; i < list.length; i++) {\r\n            let item = list[i];\r\n            let attrs = item.categoryName ? item.categoryName.split('/') : [];\r\n\r\n            attrs.forEach((name: string, index: number) => {\r\n                node = this.getRoot(node, attrs.slice(0, index + 1).join('/'), name);\r\n            });\r\n            if (!node.children) {\r\n                node.children = [];\r\n            }\r\n            node.children.push({\r\n                id: item.id,\r\n                name: item.name || 'N/A',\r\n                alias: item.name\r\n            });\r\n            node = listOut[0];\r\n        }\r\n\r\n        return listOut;\r\n    }\r\n\r\n    searchNode(datasourceList: Array<any>, datasetList: Array<any>, keywords: string, tree: TreeComponent) {\r\n        if (!datasetList || !datasetList.length) {\r\n            return;\r\n        }\r\n        let para = {\r\n            dsName: '',\r\n            dsrName: ''\r\n        };\r\n        let originalData: Array<any>;\r\n        // map datasetList to list (add datasourceName)\r\n        let list = datasetList.map((ds: any) => {\r\n            let dsr = datasourceList && datasourceList.filter((obj: any) => {\r\n                return obj.id === ds.data.datasource\r\n            })[0];\r\n\r\n            return {\r\n                id: ds.id,\r\n                name: ds.name,\r\n                categoryName: ds.categoryName,\r\n                datasourceName: dsr ? dsr.name : ''\r\n            };\r\n        });\r\n\r\n        // split search keywords\r\n        if (keywords) {\r\n            if (keywords.indexOf(' ') === -1 && keywords.indexOf(':') === -1) {\r\n                para.dsName = keywords;\r\n            } else {\r\n                let keys = keywords.split(' ');\r\n\r\n                for (let i = 0; i < keys.length; i++) {\r\n                    let w = keys[i].trim();\r\n\r\n                    if (w.split(':')[0] === 'ds') {\r\n                        para['dsName'] = w.split(':')[1];\r\n                    }\r\n                    if (w.split(':')[0] === 'dsr') {\r\n                        para['dsrName'] = w.split(':')[1];\r\n                    }\r\n                }\r\n            }\r\n            // filter data by keywords\r\n            originalData = this.buildTree(list.filter((item: any) => {\r\n                return item.name.indexOf(para.dsName) > -1 && item.datasourceName.indexOf(para.dsrName) > -1;\r\n            }));\r\n        } else {\r\n            originalData = this.buildTree(list);\r\n        }\r\n\r\n        if (tree) {\r\n            tree.treeModel.nodes = originalData;\r\n            tree.treeModel.update();\r\n            setTimeout(function() {\r\n                tree.treeModel.expandAll();\r\n            }, 500);\r\n        }\r\n    }\r\n\r\n    checkTreeNode(actionType: string, tree: TreeComponent): boolean {\r\n        let selectedNodes = tree.treeModel.getActiveNodes();\r\n\r\n        if (selectedNodes.length === 0) {\r\n            this.dialogService.confirm('Please, select one widget first!', 'prompt');\r\n\r\n            return false;\r\n        } else if (typeof(selectedNodes[0].children) !== 'undefined') {\r\n            this.dialogService.confirm('Can\\'t ' + actionType + ' a folder!', 'prompt');\r\n\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    moveNode(event: any, tree: TreeComponent, options: any) {\r\n        let owner = this;\r\n\r\n        let updateItem = function(nodeid, newCategory) {\r\n            let item = options.list.filter((item: any) => {\r\n                return item.id === nodeid;\r\n            })[0];\r\n\r\n            item.categoryName = newCategory;\r\n            owner.dataServer.post(options.updateUrl, {\r\n                json: JSON.stringify(item)\r\n            }, REQUEST_OPTIONS).subscribe((data: any) => {\r\n                if (data.status === '1') {\r\n                    // console.log('success!');\r\n                } else {\r\n                    owner.dialogService.confirm(data.msg, 'COMMON.TIP');\r\n                }\r\n            });\r\n        };\r\n\r\n        let updateNode = function (node, tarPath) {\r\n            let children = node.children;\r\n\r\n            if (!children || children.length === 0) {\r\n                updateItem(node.id, tarPath);\r\n            } else {\r\n                let newTarPath = tarPath === '' ? node.name : tarPath + '/' + node.name;\r\n\r\n                for (let i = 0; i < children.length; i++) {\r\n                    let child = children[i];\r\n\r\n                    updateNode(child, newTarPath);\r\n                }\r\n            }\r\n        };\r\n\r\n        updateNode(event.node, this.getNodePath(event.to.parent));\r\n    }\r\n\r\n    getNodePath(node: any): string {\r\n        let path = node.name;\r\n\r\n        if (node.parent) {\r\n            path = this.getNodePath(node.parent) + path;\r\n        }\r\n\r\n        return path\r\n    }\r\n\r\n    getRoot(root: any, id: string, name: string): any {\r\n        let node = null;\r\n\r\n        if (root.children) {\r\n            for (let i = 0; i < root.children.length; i++) {\r\n                let item = root.children[i];\r\n\r\n                if (item.id === id) {\r\n                    node = item;\r\n                    break;\r\n                }\r\n            }\r\n        } else {\r\n            root.children = [];\r\n        }\r\n        if (node === null) {\r\n            node = {\r\n                id: id,\r\n                name: name,\r\n                isExpanded: true,\r\n                children: []\r\n            };\r\n            root.children.push(node);\r\n        }\r\n\r\n        return node;\r\n    }\r\n}"]}