{"version":3,"sources":["src/board/board.service.ts"],"names":[],"mappings":"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","file":"../../../src/board/board.service.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { Subject } from 'rxjs/Subject';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\n\r\nexport class BoardService {\r\n    applyParamsSubject: Subject<any>;\r\n    datasetFilters: any;\r\n    widgetFilters: any;\r\n    relationFilters: any;\r\n    board: any;\r\n    relations: Array<any>;\r\n\r\n    constructor(private route: ActivatedRoute) {\r\n        this.applyParamsSubject = new Subject();\r\n\r\n        this.widgetFilters = {};\r\n        this.datasetFilters = {};\r\n        this.relationFilters = {};\r\n        this.board = {};\r\n        this.relations = [];\r\n    }\r\n\r\n    beforeFilter() {\r\n        this.datasetFilters = {};\r\n        this.widgetFilters = {};\r\n        this.relationFilters = {};\r\n\r\n        this.board.layout.rows.forEach((row) => {\r\n            if (row.params) {\r\n                this.paramToFilter(row.params);\r\n            }\r\n        });\r\n        // 将点击的参数赋值到relationFilters中\r\n        this.relations.forEach((relation) => {\r\n            if (relation.targetId && relation.params && relation.params.length > 0) {\r\n                relation.params.forEach((param) => {\r\n                    let p = {\r\n                        col: param.targetField,\r\n                        type: '=',\r\n                        values: [param.value]\r\n                    };\r\n\r\n                    if (!this.relationFilters[relation.targetId]) {\r\n                        this.relationFilters[relation.targetId] = [];\r\n                    }\r\n                    this.relationFilters[relation.targetId].push(p); // relation.targetId == widgetId\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    paramToFilter(params: Array<any>) {\r\n        params.forEach((param) => {\r\n            // 将点击的参数赋值到看板上的参数中\r\n            // '{'targetId':3,'params':[{'targetField':'logo','value':'iphone'},{'targetField':'logo1','value':'上海市'}]}' targetField==param.name\r\n            let queryParam = this.route.snapshot.params[param.name];\r\n\r\n            if (queryParam) {\r\n                param.values.push(queryParam.value);\r\n            }\r\n            if (!param.values.length) {\r\n                return;\r\n            }\r\n            _.each(param.col, (col) => {\r\n                let p = {\r\n                    col: col.column,\r\n                    type: param.type,\r\n                    values: param.values\r\n                };\r\n\r\n                if (_.isUndefined(col.datasetId)) {\r\n                    if (!this.widgetFilters[col.widgetId]) {\r\n                        this.widgetFilters[col.widgetId] = [];\r\n                    }\r\n                    this.widgetFilters[col.widgetId].push(p);\r\n                } else {\r\n                    if (!this.datasetFilters[col.datasetId]) {\r\n                        this.datasetFilters[col.datasetId] = [];\r\n                    }\r\n                    this.datasetFilters[col.datasetId].push(p);\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    injectFilter(widget) {\r\n        let boardFilters = [];\r\n\r\n        if (!_.isUndefined(this.widgetFilters[widget.id])) {\r\n            _.each(this.widgetFilters[widget.id], (e) => {\r\n                boardFilters.push(e);\r\n            });\r\n        }\r\n        if (!_.isUndefined(this.datasetFilters[widget.data.datasetId])) {\r\n            _.each(this.datasetFilters[widget.data.datasetId], (e) => {\r\n                boardFilters.push(e);\r\n            });\r\n        }\r\n        if (!_.isUndefined(this.relationFilters[widget.id])) {\r\n            _.each(this.relationFilters[widget.id], (e) => {\r\n                boardFilters.push(e);\r\n            });\r\n        }\r\n        widget.data.config.boardFilters = boardFilters;\r\n\r\n        return widget;\r\n    }\r\n\r\n    initDsReloadStatus(reload: boolean): any {\r\n        let dsReloadStatus = {};\r\n\r\n        if(!this.board || !this.board.layout || !this.board.layout.rows) {\r\n            return {};\r\n        }\r\n\r\n        this.board.layout.rows.forEach((row) => {\r\n            if (!row.widgets) {\r\n                return;\r\n            }\r\n            row.widgets.forEach((widget) => {\r\n                let dataSetId = widget.widget.data.datasetId;\r\n\r\n                if (dataSetId !== undefined) {\r\n                    dsReloadStatus[dataSetId] = reload;\r\n                }\r\n            });\r\n        });\r\n\r\n        return dsReloadStatus;\r\n    }\r\n}"]}