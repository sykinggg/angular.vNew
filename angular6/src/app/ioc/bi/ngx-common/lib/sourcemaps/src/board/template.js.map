{"version":3,"sources":["src/board/template.ts"],"names":[],"mappings":"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","file":"../../../src/board/template.js","sourcesContent":["import { Component, ComponentFactoryResolver, OnInit, OnDestroy } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { debounceTime, delay } from 'rxjs/operators';\r\n\r\nimport { ApiServer } from 'core-services/core';\r\nimport { DataService } from '../data/data.service';\r\nimport { ChartService } from '../chart/chart.service';\r\nimport { REQUEST_OPTIONS } from '../request-options';\r\nimport { BoardService } from '../board/board.service';\r\nimport { ParamService } from '../param/param.service';\r\n\r\nexport class Template implements OnInit, OnDestroy {\r\n    protected apis = {\r\n        layout: 'board-data'\r\n    };\r\n\r\n    paramsInitialized = false;\r\n    loading = true;\r\n    intervals = [];\r\n    intervalGroup: any;\r\n    timeline = [];\r\n    datasetList: Array<any>;\r\n    realtimeDataset: any;\r\n    datasetMeta: any;\r\n\r\n    timelineColor = [\r\n        'info',\r\n        'danger',\r\n        'success',\r\n        'warning',\r\n        'secondary',\r\n        'primary',\r\n        'dark'\r\n    ];\r\n    board: any = {};\r\n\r\n    constructor(\r\n        protected componentFactoryResolver: ComponentFactoryResolver,\r\n        protected route: ActivatedRoute,\r\n        protected dataServer: ApiServer,\r\n        protected dataService: DataService,\r\n        protected boardService: BoardService,\r\n        protected paramService: ParamService,\r\n        protected chartService: ChartService\r\n    ) {}\r\n\r\n    ngOnInit() {\r\n        this.boardService.applyParamsSubject.pipe(debounceTime(800)).subscribe(() => {\r\n            this.applyParamFilter();\r\n        });\r\n        this.paramService.initParamsSubject.subscribe((data) => {\r\n            if (data === 0) {\r\n                this.loadWidget(false);\r\n                this.paramsInitialized = true;\r\n            }\r\n        });\r\n        this.dataService.getDatasetList().subscribe((data: any) => {\r\n            this.datasetList = data;\r\n        });\r\n        this.route.params.subscribe((params) => {\r\n            if (params.id) {\r\n                this.intervals.forEach((interval) => {\r\n                    interval.unsubscribe();\r\n                });\r\n                this.initComponent();\r\n                this.load(false);\r\n            }\r\n        });\r\n    }\r\n\r\n    ngOnDestroy() {\r\n    }\r\n\r\n    protected getID() {\r\n        return this.route.snapshot.params['id'];\r\n    }\r\n\r\n    protected initComponent() {\r\n        this.paramService.quantity = 0;\r\n        this.boardService.datasetFilters = {};\r\n        this.boardService.widgetFilters = {};\r\n        this.boardService.relationFilters = {};\r\n\r\n        this.paramsInitialized = false;\r\n        this.loading = true;\r\n        this.timeline.length = 0;\r\n        this.intervalGroup = {};\r\n        this.realtimeDataset = {};\r\n        this.datasetMeta = {};\r\n        this.intervals.length = 0;\r\n    }\r\n\r\n    protected applyParamFilter() {\r\n        this.boardService.beforeFilter();\r\n        this.board.layout.rows.forEach((row) => {\r\n            if (!row.widgets) {\r\n                return;\r\n            }\r\n            row.widgets.forEach((w) => {\r\n                try {\r\n                    this.chartService.realTimeRender(w.realTimeTicket, this.boardService.injectFilter(w.widget).data, null, w, true);\r\n                } catch (e) {\r\n                    console.error(e);\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    protected load(reload: boolean): Observable<any> {\r\n        let subject = new Subject();\r\n\r\n        this.loading = true;\r\n        this.intervals.forEach((interval) => {\r\n            interval.unsubscribe();\r\n        });\r\n        this.intervals = [];\r\n\r\n        this.dataServer.get(this.apis.layout, {\r\n            id: this.getID()\r\n        }, REQUEST_OPTIONS).subscribe((data: any) => {\r\n            this.intervalGroup = {};\r\n            this.loading = false;\r\n            this.board = this.boardService.board = data;\r\n            this.board.layout.rows.forEach((row) => {\r\n                if (row.params) {\r\n                    this.paramService.quantity += row.params.length;\r\n                }\r\n            });\r\n            if (this.board.layout.type === 'timeline') {\r\n                this.groupTimeline();\r\n            }\r\n            if (this.paramService.quantity === 0) {\r\n                this.loadWidget(reload);\r\n                this.paramsInitialized = true;\r\n            }\r\n            subject.next(this.board);\r\n        });\r\n\r\n        return subject;\r\n    }\r\n\r\n    private groupTimeline() {\r\n        let group = undefined;\r\n\r\n        this.timeline = [];\r\n        this.board.layout.rows.forEach((row, idx: number) => {\r\n            if (idx === 0) {\r\n                return;\r\n            }\r\n            row.show = false;\r\n            if (row.node === 'parent') {\r\n                if (group) {\r\n                    this.timeline.push(group);\r\n                }\r\n                group = [];\r\n                row.show = true;\r\n            }\r\n            group.push(row);\r\n        });\r\n        this.timeline.push(group);\r\n    }\r\n\r\n    private loadWidget(reload) {\r\n        let dsReloadStatus = this.boardService.initDsReloadStatus(reload);\r\n\r\n        this.boardService.beforeFilter();\r\n        this.board.layout.rows.forEach((row) => {\r\n            if (!row.widgets) {\r\n                return;\r\n            }\r\n            row.widgets.forEach((widget) => {\r\n                if (!_.isUndefined(widget.hasRole) && !widget.hasRole) {\r\n                    return;\r\n                }\r\n                let dataSetId = widget.widget.data.datasetId;\r\n\r\n                // avoid repeat load offline dataset data\r\n                if (dataSetId !== undefined && reload) {\r\n                    dsReloadStatus[dataSetId] =  false;\r\n                }\r\n                if (this.board.layout.type === 'timeline') {\r\n                    if (row.show) {\r\n                        widget.show = true;\r\n                    }\r\n                } else {\r\n                    widget.show = true;\r\n                }\r\n                // real time load task\r\n                let w = widget.widget.data;\r\n                let ds = _.find(this.datasetList, (e) => {\r\n                    return e.id === w.datasetId;\r\n                });\r\n                if (ds && ds.data.interval && ds.data.interval > 0) {\r\n                    if (!this.intervalGroup[w.datasetId] && !widget.sourceId) {\r\n                        let timer = Observable.interval(ds.data.interval * 1000);\r\n\r\n                        this.intervalGroup[w.datasetId] = [];\r\n                        this.intervals.push(timer);\r\n                        timer.subscribe(() => {\r\n                            // Refresh Params\r\n                            this.boardService.beforeFilter();\r\n                            _.each(this.intervalGroup[w.datasetId], (e) => {\r\n                                e();\r\n                            });\r\n                        });\r\n                    }\r\n                    this.intervalGroup[w.datasetId].push(() => {\r\n                        try {\r\n                            if (widget.show) {\r\n                                this.chartService.realTimeRender(widget.realTimeTicket, this.boardService.injectFilter(widget.widget).data);\r\n                                if (widget.modalRealTimeTicket) {\r\n                                    this.chartService.realTimeRender(widget.modalRealTimeTicket, this.boardService.injectFilter(widget.widget).data, widget.modalRealTimeOption.optionFilter, null);\r\n                                }\r\n                            }\r\n                        } catch (e) {\r\n                            console.error(e);\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        });\r\n    }\r\n}"]}