{"version":3,"sources":["src/chart/render/cBoardMapRender.service.ts"],"names":[],"mappings":";;;AAAA,sCAA2C;AAC3C,yEAAuE;AAEvE,IAAI,WAAW,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC;AACzC,0BAA4B;AAI5B;IACI,gCACY,aAAmC;QAAnC,kBAAa,GAAb,aAAa,CAAsB;IAC5C,CAAC;IAOJ,gDAAe,GAAf,UAAgB,WAAW,EAAE,OAAO,EAAE,KAAK;QACvC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,IAAI,CAAC;QACV,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,KAAK,GAAQ,IAAI,CAAC;QACtB,CAAC,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,iCAAiC,CAAC,CAAC;QACvD,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC;YACrB,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QACzB,CAAC,CAAC,CAAC;QAEH,OAAO,IAAI,CAAC;IAChB,CAAC;IAAA,CAAC;IAEF,mCAAE,GAAF,UAAG,IAAI,EAAE,OAAQ;QACb,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,WAAW,CAAC;QAClC,IAAI,GAAG,CAAC,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC;QACxC,IAAI,IAAI,GAAG;YACP,MAAM,EAAE,IAAI,GAAG,EAAE;YACjB,WAAW,EAAE,IAAI,CAAC,OAAO,CAAC,WAAW;YACrC,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI;YACvB,SAAS,EAAE,IAAI,CAAC,SAAS;YACzB,KAAK,EAAE,IAAI,CAAC,KAAK;SACpB,CAAC;QACF,IAAI;YACA,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;SAChC;QAAC,OAAO,GAAG,EAAE;SACb;QACD,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,GAAG,CAAC;YACpB,MAAM,EAAE,IAAI,GAAG,EAAE,GAAG,IAAI;YACxB,KAAK,EAAE,MAAM;SAChB,CAAC,CAAC;QACH,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC;YAClB,MAAM,EAAE,IAAI,GAAG,IAAI;YACnB,KAAK,EAAE,MAAM;SAChB,CAAC,CAAC;QACH,IAAI,KAAK,GAAG,IAAI,CAAC;QACjB,IAAI,OAAO,EAAE;YACT,UAAU,CAAC;gBACP,oCAAoC;gBACpC,sCAAsC;gBACtC,yDAAyD;gBACzD,+BAA+B;gBAC/B,QAAQ;gBACR,MAAM;gBACN,WAAW,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,UAAC,MAAW;oBAC7C,OAAO,CAAC,IAAI,GAAG,MAAM,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;oBAC9C,OAAO,CAAC,IAAI,GAAG,KAAK,CAAA;gBACxB,CAAC,CAAC,CAAA;YACN,CAAC,EAAE,IAAI,CAAC,CAAC;SACZ;QACD,OAAO,UAAU,CAAC;YACd,KAAK,CAAC,OAAO,GAAG,CAAC,CAAC;YAClB,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QACzB,CAAC,CAAA;IACL,CAAC;IAAA,CAAC;IAlEO,sBAAsB;QAFlC,iBAAU,EAAE;iDAIkB,4CAAoB;OAFtC,sBAAsB,CAmElC;IAAD,6BAAC;CAnED,AAmEC,IAAA;AAnEY,wDAAsB","file":"../../../../src/chart/render/cBoardMapRender.service.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { ThreeLevelMapService } from '../common/threeLevelMap.Service';\r\n\r\nvar html2canvas = require('html2canvas');\r\nimport * as _ from 'lodash';\r\n\r\n@Injectable()\r\n\r\nexport class CBoardMapRenderService {\r\n    constructor(\r\n        private threeLevelMap: ThreeLevelMapService\r\n    ) {}\r\n\r\n    options;\r\n    tall;\r\n    jqContainer;\r\n    drill;\r\n    container;\r\n    CBoardMapRender(jqContainer, options, drill) {\r\n        this.options = options;\r\n        this.tall;\r\n        this.jqContainer = jqContainer;\r\n        this.drill = drill;\r\n        var _this: any = this;\r\n        $(jqContainer).html(\"<div class='map_wrapper'></div>\");\r\n        $('.map_wrapper').resize(function () {\r\n            _this.do(_this.tall);\r\n        });\r\n\r\n        return this;\r\n    };\r\n\r\n    do(tall, persist?) {\r\n        this.tall = tall;\r\n        this.container = this.jqContainer;\r\n        tall = _.isUndefined(tall) ? 500 : tall;\r\n        var args = {\r\n            height: tall - 20,\r\n            chartConfig: this.options.chartConfig,\r\n            data: this.options.data,\r\n            container: this.container,\r\n            drill: this.drill\r\n        };\r\n        try {\r\n            this.threeLevelMap.map(args);\r\n        } catch (err) {\r\n        }\r\n        $(this.jqContainer).css({\r\n            height: tall + 40 + \"px\",\r\n            width: '100%'\r\n        });\r\n        $(this.container).css({\r\n            height: tall + \"px\",\r\n            width: '100%'\r\n        });\r\n        var _this = this;\r\n        if (persist) {\r\n            setTimeout(function () {\r\n                // html2canvas(_this.container[0], {\r\n                //     onrendered: function (canvas) {\r\n                //         persist.data = canvas.toDataURL(\"image/jpeg\");\r\n                //         persist.type = \"jpg\"\r\n                //     }\r\n                // });\r\n                html2canvas(_this.container[0]).then((canvas: any) => {\r\n                    persist.data = canvas.toDataURL(\"image/jpeg\");\r\n                    persist.type = \"jpg\"\r\n                })\r\n            }, 1000);\r\n        }\r\n        return function (o) {\r\n            _this.options = o;\r\n            _this.do(_this.tall);\r\n        }\r\n    };\r\n}"]}