{"version":3,"sources":["src/param/param.service.ts"],"names":[],"mappings":"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","file":"../../../src/param/param.service.js","sourcesContent":["import { DatePipe } from '@angular/common';\r\nimport { Injectable } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { Subject } from 'rxjs';\r\n\r\nimport { ApiServer } from 'core-services/core';\r\nimport { REQUEST_OPTIONS } from '../request-options';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\n\r\nexport class ParamService {\r\n    initParamsSubject: Subject<any>;\r\n    quantity: number;\r\n\r\n    constructor(\r\n        private route: ActivatedRoute,\r\n        private datePipe: DatePipe,\r\n        private translateService: TranslateService,\r\n        private dataServer: ApiServer\r\n    ) {\r\n        this.initParamsSubject = new Subject();\r\n        this.quantity = 0;\r\n    }\r\n\r\n    initParam(param: any, rows: any) {\r\n        param.selects = [];\r\n        if (!param.type) {\r\n            param.type = '=';\r\n        }\r\n        if (!param.values) {\r\n            console.log('param.values = []');\r\n            param.values = [];\r\n        }\r\n        if (!param.paramType) {\r\n            param.paramType = 'selector';\r\n        }\r\n        switch (param.paramType) {\r\n            case 'slider':\r\n                this.quantity--;\r\n                this.initParamsSubject.next(this.quantity);\r\n                break;\r\n            case 'date_range':\r\n                let range = this.route.snapshot.queryParams.range;\r\n\r\n                if (range) {\r\n                    param.values = range.split('_').map((item) => parseInt(item));\r\n                }\r\n                this.quantity--;\r\n                this.initParamsSubject.next(this.quantity);\r\n                break;\r\n            case 'selector':\r\n                let requestURL: string;\r\n\r\n                param.value = '';\r\n                switch (param.col[0].column) {\r\n                    case 'areaid':\r\n                        requestURL = 'param-area';\r\n                        break;\r\n                    case 'ac_base_mac':\r\n                        requestURL = 'param-ac';\r\n                        break;\r\n                    case 'userid':\r\n                        requestURL = 'param-user';\r\n                        break;\r\n                }\r\n                if (requestURL) {\r\n                    this.dataServer.request(requestURL, null, REQUEST_OPTIONS).subscribe((data: any) => {\r\n                        param.selects = data;\r\n                        param.values = param.selects.map((item) => item.value);\r\n                        this.quantity--;\r\n                        this.initParamsSubject.next(this.quantity);\r\n                    });\r\n                } else {\r\n                    this.quantity--;\r\n                    this.initParamsSubject.next(this.quantity);\r\n                }\r\n                break;\r\n            default:\r\n                let getParamsFromWidget = function(widgets: any, col: any): any {\r\n                    let params: any;\r\n\r\n                    widgets.some((widget) => {\r\n                        if (widget.widget.id === col.widgetId) {\r\n                            params = {\r\n                                datasourceId: widget.widget.data.datasource,\r\n                                query: JSON.stringify(widget.widget.data.query),\r\n                                datasetId: null\r\n                            };\r\n\r\n                            return true;\r\n                        }\r\n\r\n                        return false;\r\n                    });\r\n\r\n                    return params;\r\n                };\r\n\r\n                param.col.forEach((c) => {\r\n                    let p;\r\n\r\n                    if (!c.datasetId) {\r\n                        if (rows instanceof Array) {\r\n                            rows.some((row) => {\r\n                                p = getParamsFromWidget(row.widgets, c);\r\n\r\n                                return !!p;\r\n                            });\r\n                        } else {\r\n                            p = getParamsFromWidget(rows.widgets, c);\r\n                        }\r\n                    } else {\r\n                        p = {\r\n                            datasourceId: null,\r\n                            query: null,\r\n                            datasetId: c.datasetId\r\n                        };\r\n                    }\r\n                    this.dataServer.post('dimension-values', {\r\n                        ...p,\r\n                        colmunName: c.column\r\n                    }, REQUEST_OPTIONS).subscribe((data: any) => {\r\n                        data.forEach((s) => {\r\n                            if (_.indexOf(param.selects, s) < 0) {\r\n                                param.selects.push(s);\r\n                            }\r\n                        });\r\n                    });\r\n                });\r\n                this.quantity--;\r\n                this.initParamsSubject.next(this.quantity);\r\n        }\r\n    }\r\n\r\n    getParamTitle(param: any): string {\r\n        let description: string;\r\n\r\n        if (param.paramType === 'selector') {\r\n            if (param.value === '') {\r\n                description = param.name + ' ' + param.type + ' (' + this.translateService.instant('COMMON.ALL') + ')';\r\n            } else {\r\n                description = param.name + ' ' + param.type + ' (' + param.values.map((value) => {\r\n                    let name: string;\r\n\r\n                    param.selects.some((option) => {\r\n                        if (value === option.value) {\r\n                            name = option.name;\r\n                            return true;\r\n                        }\r\n                        return false;\r\n                    });\r\n\r\n                    return name;\r\n                }) + ')';\r\n            }\r\n        } else {\r\n            switch (param.type) {\r\n                case '=':\r\n                case '≠':\r\n                    description = param.name + ' ' + param.type + ' (' + param.values + ')';\r\n                    break;\r\n                case '>':\r\n                case '<':\r\n                case '≥':\r\n                case '≤':\r\n                    description = param.name + ' ' + param.type + ' ' + param.values;\r\n                    break;\r\n                case '(a,b]':\r\n                case '[a,b)':\r\n                case '(a,b)':\r\n                case '[a,b]':\r\n                    var leftBrackets = param.type.split('a')[0];\r\n                    var rightBrackets = param.type.split('b')[1];\r\n\r\n                    try {\r\n                        if (param.paramType === 'slider') {\r\n                            description = param.name + ' between ' + leftBrackets + param.values.map((item) => {\r\n                                let datePattern = /(^\\d{4})(\\d{2})(\\d{2})/;\r\n\r\n                                return item.replace(datePattern, '$1-$2-$3');\r\n                            }).join(' , ') + rightBrackets;\r\n                        } else {\r\n                            description = param.name + ' between ' + leftBrackets + param.values.map((item) => {\r\n                                return this.datePipe.transform(new Date(parseInt(item)), 'yyyy-MM-dd HH:mm:ss', 'UTC');\r\n                            }).join(' , ') + rightBrackets;\r\n                        }\r\n                    } catch (error) {\r\n                        description = param.name + ' between ' + leftBrackets + param.values.join(',') + rightBrackets;\r\n                    }\r\n                    break;\r\n                default:\r\n                    description = param.name;\r\n            }\r\n        }\r\n\r\n        return description;\r\n    }\r\n}"]}